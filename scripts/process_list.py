#!/usr/bin/env python3

import sys,csv,json,os,re,io
from glob import glob

class FakeFile:
    def __init__(*args):
        pass
    def write(*args):
        pass
    def close(*args):
        pass
    
fn = sys.argv[1]

try:
    os.chdir(os.path.dirname(fn))
except FileNotFoundError:
    pass # happens if run on a file in the current directory

fn = os.path.basename(fn)

inf = open(fn)
outf = open('gen/'+fn.replace('.lst','.html'), 'w')
if fn.startswith('All_'):
    slidef = FakeFile()
else:
    slidef = open('gen/'+fn.replace('.lst','-slides.html'), 'w')

title = fn.replace('.lst','').replace('_',' ')

outf.write("""
<html>
  <head>
    <title>%s</title>
    <link rel="stylesheet" type="text/css" href="../../theme.css">
    <script src='../../theme-switcher.js'></script>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
  </head>
  <body>
    %s
    <h1>%s</h1>
""" % (title,open('../misc/header.html').read(),title))

slidef.write("""
<html>
  <head>
    <title>%s Automated Slides</title>
    <link rel="stylesheet" type="text/css" href="../../theme.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src='../../auto-slide.js'></script>  
    <script>
const slides = [
""" % title);

def process_instruction(line):
    if line[0]=='[' and line[-1]==']':
        outf.write('<li style="list-style:none;font-size:smaller;"><i>%s</i>' % line)
        slidef.write("{type:'text', title:'%s'},\n" % line.replace("'",""))
        return True
    else:
        return False

def process_song(line):
    try:
        readme = open('../songs/%s/README.md' % line)
    except IOError:
        return False
    slidef.write("{type:'song',")
    foundaudio = False
    for rl in readme:
        rl=rl.strip()
        if rl[:3]=='###':
            pass
        elif rl[:2]=='##':
            if rl[:6]=='## By ' or rl[:5]=='##By ':
                outf.write(' <i class=small>%s</i>' % rl[2:].replace('By ','by '))
                slidef.write("attribution:'%s'," % rl[2:].replace(",",""))
            else:
                outf.write(' &#x25e6; '+rl[2:])
        elif rl[:1]=='#':
            outf.write('<li><b><a href=../../songs/%s/gen/>%s</a></b> ' % (line, rl[1:]))
            slidef.write("title:'%s'," % rl[1:].replace(",",""))
        if not foundaudio:
            if (m := re.search('\(https://www.youtube.com/watch\?v=([a-zA-Z0-9_-]*)\)', rl)):
                slidef.write("youtube:'%s',"%m.group(1))
                foundaudio=True
            if (m := re.search('\((https?://[^)]*\.mp3)\)', rl)):
                slidef.write("mp3:'%s',"%m.group(1))
                foundaudio=True
    if not foundaudio:
        if g := glob('../songs/%s/*.mp3'%line):
            slidef.write("mp3:'../%s',"%g[0])
    gt = '../songs/%s/gen/*-lyrics.txt'%line
    try:
        lf = open(glob(gt)[0])
        slidef.write("lyrics:"+json.dumps([l for l in lf.readlines() if l.strip()], indent=2))
    except IndexError:
        slidef.write("lyrics:['Lyrics Not Available','%s']"%gt)
    slidef.write('},\n')
    outf.write('\n')
    return True

def process_speech(line):
    pieces = line.split(': ')
    try:
        f = open('../speeches/%s.md' % pieces[0])
    except IOError:
        return False
    for fl in f:
        fl=fl.strip()
        if fl[:2]=='##' and ('by' in fl or 'By' in fl):
            outf.write(' <i class=small>%s</i>' % fl[2:].replace('By ','by '))
        elif fl[:1]=='#' and fl[1]!='#':
            outf.write('<li><b><a href=../../speeches/gen/%s.html>%s</a></b> ' % (pieces[0], fl[1:]))
            slidef.write("{type:'text', title:'%s', link:'%s'},\n" % (fl[1:].replace("'",""), pieces[0]))
    if len(pieces)==2:
        outf.write(' -- %s...' % pieces[1])
    return True

def process_failure(line):
    outf.write('<li>%s [Not Available]' % line)
    return True

inul=False
for line in inf:
    line=line.strip()
    if line=='':
        continue
    if line[0]=='#':
        if inul:
            outf.write('</ul>\n')
            inul=False
        outf.write('<h2>%s</h2>\n' % line[1:])
        slidef.write("{type:'section',title:'%s'},\n" % line[1:].strip())
    elif line[0]=='{' and line[-1]=='}':
        outf.write('<h3>%s</h3>\n' % line[1:-1])
    else:
        if not inul:
            outf.write('<ul>\n')
            inul=True
        process_instruction(line) or process_song(line) or process_speech(line) or process_failure(line)

if inul:
    outf.write('</ul>')

if isinstance(slidef, io.IOBase):
    outf.write("<a class=rawgit href=%s>Autogenerated Slides</a>" % fn.replace('.lst','-slides.html'))
outf.write("<a class=rawgit href=https://github.com/SecularSolstice/SecularSolstice.github.io/blob/master/lists/%s>Raw Git</a>" % fn)
    
outf.write('</body></html>')
outf.close()

slidef.write('];</script></head><body>Loading...</body></html>')
slidef.close()
